[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Josh Charlton",
    "section": "",
    "text": "Hi, I’m Josh Charlton, welcome to my site! In this website, I have my current info, as well as a few projects I have been working on."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "MiniProject1WS.html",
    "href": "MiniProject1WS.html",
    "title": "MiniProject1",
    "section": "",
    "text": "library(viridis)\n\nLoading required package: viridisLite\n\nlibrary(maps)\n\n\nAttaching package: 'maps'\n\n\nThe following object is masked from 'package:viridis':\n\n    unemp\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n✖ purrr::map()    masks maps::map()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(leaflet)\n\nThe data for this project will be using the leading causes of death in the United States dataset, linked here: [https://data.cdc.gov/NCHS/NCHS-Leading-Causes-of-Death-United-States/bi63-dtpu/about_data]\nFor this (mini) project, we will be analyzing the different death statistics across the US for each individual state, specifically for the year 2016. The numeric data we will be analyzing is the age-adjusted rate for the highest cause of death, while the categorical data used is the leading cause of death for each state.\nLet’s load in the data\n\nmain_data &lt;- read_csv(\"C:/Users/charl/Documents/SDS_264/NCHS_-_Leading_Causes_of_Death__United_States.csv\")\n\nRows: 10868 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): 113 Cause Name, Cause Name, State\ndbl (3): Year, Deaths, Age-adjusted Death Rate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHere we are only getting the data from 2016, and renaming the states for consistency reasons later.\n\nmain_data &lt;- main_data |&gt;\n  filter(Year == \"2016\") |&gt; #filter only 2016\n  select(-c(`113 Cause Name`)) |&gt;\n  mutate(State = str_to_lower(State)) #uniformity for state names later\n\n\nlibrary(maps) #load in maps\nus_states &lt;- map_data(\"state\")\nhead(us_states)\n\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      &lt;NA&gt;\n2 -87.48493 30.37249     1     2 alabama      &lt;NA&gt;\n3 -87.52503 30.37249     1     3 alabama      &lt;NA&gt;\n4 -87.53076 30.33239     1     4 alabama      &lt;NA&gt;\n5 -87.57087 30.32665     1     5 alabama      &lt;NA&gt;\n6 -87.58806 30.32665     1     6 alabama      &lt;NA&gt;\n\n\nNext, let’s find out which is the highest cause of death in each state, we will plot these results later.\n\nmain_data &lt;- main_data |&gt;\n  group_by(State) |&gt;\n  filter(`Cause Name` != \"All causes\") |&gt;\n  mutate(highest_death = max(Deaths),\n         highest_cause = `Cause Name`[which.max(Deaths)]) |&gt;\n  ungroup()\n\nThen we create a new table of just the highest cause of death.\n\nhighest_cause_data &lt;- main_data |&gt;\n  filter(`Cause Name` == highest_cause)\n\nLet’s plot the categorical data, what exactly is causing the greatest amount of death for every state?\n\nhighest_cause_data |&gt;\n  right_join(us_states, by = c(\"State\" = \"region\")) |&gt;\n  rename(region = State) |&gt;\n  ggplot(mapping = aes(x = long, y = lat, group = group)) + \n  geom_polygon(aes(fill = highest_cause), color = \"black\") +\n  labs(\n    title = \"Leading Cause of Death by State in the United States\",\n    subtitle = \"Comparing Heart Disease and Cancer as the Primary Causes of Mortality\",\n    fill = \"Highest Cause of Death\",\n    x = \"Longitude\",\n    y = \"Latitude\"\n  )\n\n\n\n\n\n\n\nstr(main_data$highest_cause)\n\n chr [1:520] \"Heart disease\" \"Cancer\" \"Heart disease\" \"Heart disease\" ...\n\n\nALT TEXT: Here we have a map of the United States, divided by the different states in the US. On the y axis we have the latitude of the map, with values ranging from 25 to 50, on the x axis we have the longitude of the map, with values ranging from -125 to - 65. From this graph, we can see that the majority of the US has their main cause of death coming from heart disease, with the rare exception of cancer. Cancer is the leading cause of death in Washington, Oregon, Colorado, Nebraska, Minnestoa, South Carolina, North Carolina, Virginia, DC, Massachusetts, New Hampshire, and Maine, where everywhere else has heart disease as a higher cause of death.\nWe will also see just how deadly these are through Age-adjusted Death Rates in the data. An excerpt from https://www.health.ny.gov/diseases/chronic/ageadj.htm defines Age-adjusted Death Rate as “usually expressed in terms of the number of cases/deaths per 100,000 people per year”.\n\nhighest_cause_data |&gt;\n  right_join(us_states, by = c(\"State\" = \"region\")) |&gt;\n  rename(region = State) |&gt;\n  ggplot(mapping = aes(x = long, y = lat, group = group)) + \n  geom_polygon(aes(fill = `Age-adjusted Death Rate`), color = \"black\") +\n  labs(\n    title = \"Age-Adjusted Death Rates Across the U.S. by Leading Cause of Death\",\n    subtitle = \"Higher Mortality Rates Observed in Certain Regions\",\n    fill = \"Death Rate\",\n    x = \"Longitude\",\n    y = \"Latitude\"\n  ) +\n  scale_fill_viridis()\n\n\n\n\n\n\n\n\nFrom this graph we can see that areas such as the south are more impacted by their death rates than others areas. Specifically, their highest cause is heart disease, so we see that that is impacting them at a rate higher than other areas.\nNext we will load in our interactive plots using the sf library:\n\nlibrary(sf)\n\nLinking to GEOS 3.13.0, GDAL 3.10.1, PROJ 9.5.1; sf_use_s2() is TRUE\n\nstates &lt;- read_sf(\"https://rstudio.github.io/leaflet/json/us-states.geojson\")\n\nHere we get the sf version of states, so we can then add our data as follows:\n\nlibrary(htmltools)\nlibrary(glue)\n\nstates &lt;- states |&gt;\n  mutate(name = str_to_lower(name)) |&gt; #align state names and get data from highest cause\n  right_join(highest_cause_data, by = c(\"name\" = \"State\"))\n\nstates &lt;- states |&gt; #create labels for graphs\n  mutate(labels = str_c(name, \", Age-adjusted death: \", `Age-adjusted Death Rate`, \" from: \", highest_cause))\n\n\nbins &lt;- c(100, 125, 150, 175, 200, 225, 250, 275, Inf)\npal &lt;- colorBin(\"YlOrRd\", domain = states$density, bins = bins)\n# If want more HTML formatting, use these lines instead of those above:\n#states &lt;- states |&gt;\n#  mutate(labels = glue(\"&lt;strong&gt;{name}&lt;/strong&gt;&lt;br/&gt;{density} people / #mi&lt;sup&gt;2&lt;/sup&gt;\"))\n\nlabels &lt;- lapply(states$labels, HTML)\n\nleaflet(states) |&gt;\n  setView(-96, 37.8, 4) |&gt;\n  addTiles() |&gt;\n  addPolygons(\n    fillColor = ~pal(`Age-adjusted Death Rate`),\n    weight = 1,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) |&gt;\n  addLegend(pal = pal, values = ~`Age-adjusted Death Rate`, opacity = 0.7, title = NULL,\n    position = \"bottomright\")\n\nWarning in sf::st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data\n\n\n\n\n\n\n\nstates &lt;- states |&gt; #create labels for graphs\n  mutate(labels = str_c(name, \", Leading cause of death: \", highest_cause))\n\n\npal &lt;- colorFactor(c(\"red\", \"blue\"), domain = c(\"Cancer\", \"Heart disease\"))\n\nleaflet(states) |&gt;\n  setView(-96, 37.8, 4) |&gt;\n  addTiles() |&gt;\n  addPolygons(\n    fillColor = ~pal(highest_cause),  # Use the fixed color mapping\n    weight = 1,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) |&gt;\n  addLegend(pal = pal, values = ~highest_cause, opacity = 0.7, title = \"Leading Cause\",\n    position = \"bottomright\")\n\nWarning in sf::st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data"
  },
  {
    "objectID": "MiniProject1.html",
    "href": "MiniProject1.html",
    "title": "MiniProject1",
    "section": "",
    "text": "library(viridis)\n\nLoading required package: viridisLite\n\nlibrary(maps)\n\n\nAttaching package: 'maps'\n\n\nThe following object is masked from 'package:viridis':\n\n    unemp\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n✖ purrr::map()    masks maps::map()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(leaflet)\n\nThe data for this project will be using the leading causes of death in the United States dataset, linked here: [https://data.cdc.gov/NCHS/NCHS-Leading-Causes-of-Death-United-States/bi63-dtpu/about_data]\nFor this (mini) project, we will be analyzing the different death statistics across the US for each individual state, specifically for the year 2016. The numeric data we will be analyzing is the age-adjusted rate for the highest cause of death, while the categorical data used is the leading cause of death for each state.\nLet’s load in the data\n\nmain_data &lt;- read_csv(\"C:/Users/charl/Documents/SDS_264/NCHS_-_Leading_Causes_of_Death__United_States.csv\")\n\nRows: 10868 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): 113 Cause Name, Cause Name, State\ndbl (3): Year, Deaths, Age-adjusted Death Rate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHere we are only getting the data from 2016, and renaming the states for consistency reasons later.\n\nmain_data &lt;- main_data |&gt;\n  filter(Year == \"2016\") |&gt; #filter only 2016\n  select(-c(`113 Cause Name`)) |&gt;\n  mutate(State = str_to_lower(State)) #uniformity for state names later\n\n\nlibrary(maps) #load in maps\nus_states &lt;- map_data(\"state\")\nhead(us_states)\n\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      &lt;NA&gt;\n2 -87.48493 30.37249     1     2 alabama      &lt;NA&gt;\n3 -87.52503 30.37249     1     3 alabama      &lt;NA&gt;\n4 -87.53076 30.33239     1     4 alabama      &lt;NA&gt;\n5 -87.57087 30.32665     1     5 alabama      &lt;NA&gt;\n6 -87.58806 30.32665     1     6 alabama      &lt;NA&gt;\n\n\nNext, let’s find out which is the highest cause of death in each state, we will plot these results later.\n\nmain_data &lt;- main_data |&gt;\n  group_by(State) |&gt;\n  filter(`Cause Name` != \"All causes\") |&gt;\n  mutate(highest_death = max(Deaths),\n         highest_cause = `Cause Name`[which.max(Deaths)]) |&gt;\n  ungroup()\n\nThen we create a new table of just the highest cause of death.\n\nhighest_cause_data &lt;- main_data |&gt;\n  filter(`Cause Name` == highest_cause)\n\nLet’s plot the categorical data, what exactly is causing the greatest amount of death for every state?\n\nhighest_cause_data |&gt;\n  right_join(us_states, by = c(\"State\" = \"region\")) |&gt;\n  rename(region = State) |&gt;\n  ggplot(mapping = aes(x = long, y = lat, group = group)) + \n  geom_polygon(aes(fill = highest_cause), color = \"black\") +\n  labs(\n    title = \"Leading Cause of Death by State in the United States\",\n    subtitle = \"Comparing Heart Disease and Cancer as the Primary Causes of Mortality\",\n    fill = \"Highest Cause of Death\",\n    x = \"Longitude\",\n    y = \"Latitude\"\n  )\n\n\n\n\n\n\n\nstr(main_data$highest_cause)\n\n chr [1:520] \"Heart disease\" \"Cancer\" \"Heart disease\" \"Heart disease\" ...\n\n\nALT TEXT: Here we have a map of the United States, divided by the different states in the US. On the y axis we have the latitude of the map, with values ranging from 25 to 50, on the x axis we have the longitude of the map, with values ranging from -125 to - 65. From this graph, we can see that the majority of the US has their main cause of death coming from heart disease, with the rare exception of cancer. Cancer is the leading cause of death in Washington, Oregon, Colorado, Nebraska, Minnestoa, South Carolina, North Carolina, Virginia, DC, Massachusetts, New Hampshire, and Maine, where everywhere else has heart disease as a higher cause of death.\nWe will also see just how deadly these are through Age-adjusted Death Rates in the data. An excerpt from https://www.health.ny.gov/diseases/chronic/ageadj.htm defines Age-adjusted Death Rate as “usually expressed in terms of the number of cases/deaths per 100,000 people per year”.\n\nhighest_cause_data |&gt;\n  right_join(us_states, by = c(\"State\" = \"region\")) |&gt;\n  rename(region = State) |&gt;\n  ggplot(mapping = aes(x = long, y = lat, group = group)) + \n  geom_polygon(aes(fill = `Age-adjusted Death Rate`), color = \"black\") +\n  labs(\n    title = \"Age-Adjusted Death Rates Across the U.S. by Leading Cause of Death\",\n    subtitle = \"Higher Mortality Rates Observed in Certain Regions\",\n    fill = \"Death Rate\",\n    x = \"Longitude\",\n    y = \"Latitude\"\n  ) +\n  scale_fill_viridis()\n\n\n\n\n\n\n\n\nFrom this graph we can see that areas such as the south are more impacted by their death rates than others areas. Specifically, their highest cause is heart disease, so we see that that is impacting them at a rate higher than other areas.\nNext we will load in our interactive plots using the sf library:\n\nlibrary(sf)\n\nLinking to GEOS 3.13.0, GDAL 3.10.1, PROJ 9.5.1; sf_use_s2() is TRUE\n\nstates &lt;- read_sf(\"https://rstudio.github.io/leaflet/json/us-states.geojson\")\n\nHere we get the sf version of states, so we can then add our data as follows:\n\nlibrary(htmltools)\nlibrary(glue)\n\nstates &lt;- states |&gt;\n  mutate(name = str_to_lower(name)) |&gt; #align state names and get data from highest cause\n  right_join(highest_cause_data, by = c(\"name\" = \"State\"))\n\nstates &lt;- states |&gt; #create labels for graphs\n  mutate(labels = str_c(name, \", Age-adjusted death: \", `Age-adjusted Death Rate`, \" from: \", highest_cause))\n\n\nbins &lt;- c(100, 125, 150, 175, 200, 225, 250, 275, Inf)\npal &lt;- colorBin(\"YlOrRd\", domain = states$density, bins = bins)\n# If want more HTML formatting, use these lines instead of those above:\n#states &lt;- states |&gt;\n#  mutate(labels = glue(\"&lt;strong&gt;{name}&lt;/strong&gt;&lt;br/&gt;{density} people / #mi&lt;sup&gt;2&lt;/sup&gt;\"))\n\nlabels &lt;- lapply(states$labels, HTML)\n\nleaflet(states) |&gt;\n  setView(-96, 37.8, 4) |&gt;\n  addTiles() |&gt;\n  addPolygons(\n    fillColor = ~pal(`Age-adjusted Death Rate`),\n    weight = 1,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) |&gt;\n  addLegend(pal = pal, values = ~`Age-adjusted Death Rate`, opacity = 0.7, title = NULL,\n    position = \"bottomright\")\n\nWarning in sf::st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data\n\n\n\n\n\n\n\nstates &lt;- states |&gt; #create labels for graphs\n  mutate(labels = str_c(name, \", Leading cause of death: \", highest_cause))\n\n\npal &lt;- colorFactor(c(\"red\", \"blue\"), domain = c(\"Cancer\", \"Heart disease\"))\n\nleaflet(states) |&gt;\n  setView(-96, 37.8, 4) |&gt;\n  addTiles() |&gt;\n  addPolygons(\n    fillColor = ~pal(highest_cause),  # Use the fixed color mapping\n    weight = 1,\n    opacity = 1,\n    color = \"white\",\n    dashArray = \"3\",\n    fillOpacity = 0.7,\n    highlightOptions = highlightOptions(\n      weight = 5,\n      color = \"#666\",\n      dashArray = \"\",\n      fillOpacity = 0.7,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),\n      textsize = \"15px\",\n      direction = \"auto\")) |&gt;\n  addLegend(pal = pal, values = ~highest_cause, opacity = 0.7, title = \"Leading Cause\",\n    position = \"bottomright\")\n\nWarning in sf::st_is_longlat(x): bounding box has potentially an invalid value\nrange for longlat data"
  },
  {
    "objectID": "MiniProject2.html",
    "href": "MiniProject2.html",
    "title": "MiniProject2",
    "section": "",
    "text": "Initially, we wanted to analyze data related to running, collegiate D3 track and field race times and statistics. However, we faced difficulties when we tried to scrape the data from the website. We decided to pivot to economics as we are both interested in the subject. We chose to gather GDP data by country from Wikipedia because it is challenging to find a comprehensive CSV file with the information of a GDP forecast vs. actual forecast and then comparing it to population data. By scraping and tidying this data, we can use this data to explore economic trends and compare GDP across different countries."
  },
  {
    "objectID": "MiniProject2.html#introduction",
    "href": "MiniProject2.html#introduction",
    "title": "MiniProject2",
    "section": "",
    "text": "Initially, we wanted to analyze data related to running, collegiate D3 track and field race times and statistics. However, we faced difficulties when we tried to scrape the data from the website. We decided to pivot to economics as we are both interested in the subject. We chose to gather GDP data by country from Wikipedia because it is challenging to find a comprehensive CSV file with the information of a GDP forecast vs. actual forecast and then comparing it to population data. By scraping and tidying this data, we can use this data to explore economic trends and compare GDP across different countries."
  },
  {
    "objectID": "MiniProject2.html#sources",
    "href": "MiniProject2.html#sources",
    "title": "MiniProject2",
    "section": "Sources",
    "text": "Sources\n“https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)”: Used to get our nominal GDP data from wikipedia. Table consists of various data, but we only use Country and GDP.\n“https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population”: Used to get our population data from wikipedia. Table consists of various data, but we only use Country and population.\n\n# Step 0: Check that scraping is allowed\nrobotstxt::paths_allowed(\"https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)\")\n\n\n en.wikipedia.org                      \n\n\n[1] TRUE\n\n# Step 1: read_html()\ngdp_page &lt;- read_html(\"https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)\")\n\n# Step 2: html_nodes()\ntables &lt;- html_nodes(gdp_page, css = \"table\") \ntables  # have to guesstimate which table contains our desired info\n\n{xml_nodeset (7)}\n[1] &lt;table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" style=\"float:right;\"&gt;&lt;t ...\n[2] &lt;table width=\"100%\"&gt;&lt;tbody&gt;&lt;tr&gt;\\n&lt;td style=\"vertical-align:top;\"&gt; &lt;style  ...\n[3] &lt;table class=\"wikitable sortable sticky-header-multi static-row-numbers\"  ...\n[4] &lt;table class=\"nowraplinks mw-collapsible autocollapse navbox-inner\" style ...\n[5] &lt;table class=\"nowraplinks mw-collapsible uncollapsed navbox-inner\" style= ...\n[6] &lt;table class=\"nowraplinks hlist mw-collapsible autocollapse navbox-inner\" ...\n[7] &lt;table class=\"nowraplinks navbox-subgroup\" style=\"border-spacing:0\"&gt;&lt;tbod ...\n\n# Step 3: html_table()\nhtml_table(tables, header = TRUE, fill = TRUE)    # find the right table\n\n[[1]]\n# A tibble: 1 × 1\n  ``                                                                            \n  &lt;chr&gt;                                                                         \n1 Largest economies in the world by GDP (nominal) in 2025according to Internati…\n\n[[2]]\n# A tibble: 0 × 3\n# ℹ 3 variables:\n#   .mw-parser-output .legend{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .legend-color{display:inline-block;min-width:1.25em;height:1.25em;line-height:1.25;margin:1px 0;text-align:center;border:1px solid black;background-color:transparent;color:black}.mw-parser-output .legend-text{}  &gt; $20 trillion   $10–20 trillion   $5–10 trillion   $1–5 trillion &lt;lgl&gt;,\n#   $750 billion – $1 trillion   $500–750 billion   $250–500 billion   $100–250 billion &lt;lgl&gt;,\n#   $50–100 billion   $25–50 billion   $5–25 billion   &lt; $5 billion &lt;lgl&gt;\n\n[[3]]\n# A tibble: 211 × 7\n   `Country/Territory` `IMF[1][12]` `IMF[1][12]` `World Bank[13]`\n   &lt;chr&gt;               &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;           \n 1 Country/Territory   Forecast     Year         Estimate        \n 2 World               115,494,312  2025         105,435,540     \n 3 United States       30,338,000   2025         27,360,935      \n 4 China               19,535,000   [n 1]2025    17,794,782      \n 5 Germany             4,922,000    2025         4,456,081       \n 6 Japan               4,390,000    2025         4,212,945       \n 7 India               4,270,000    2025         3,549,919       \n 8 United Kingdom      3,731,000    2025         3,340,032       \n 9 France              3,284,000    2025         3,030,904       \n10 Italy               2,460,000    2025         2,254,851       \n# ℹ 201 more rows\n# ℹ 3 more variables: `World Bank[13]` &lt;chr&gt;, `United Nations[14]` &lt;chr&gt;,\n#   `United Nations[14]` &lt;chr&gt;\n\n[[4]]\n# A tibble: 9 × 2\n  .mw-parser-output .navbar{display:inline;font-size:88…¹ .mw-parser-output .n…²\n  &lt;chr&gt;                                                   &lt;chr&gt;                 \n1 \"Trade\"                                                 \"Account balance\\n% o…\n2 \"Investment\"                                            \"FDI received\\npast\\n…\n3 \"Funds\"                                                 \"Forex reserves\\nGold…\n4 \"Budget and debt\"                                       \"Government budget\\nP…\n5 \"Income and taxes\"                                      \"Wage\\naverage\\nDispo…\n6 \"Bank rates\"                                            \"Central bank interes…\n7 \"Currency\"                                              \"Inflation rate\"      \n8 \"Other\"                                                 \"Financial Developmen…\n9 \"Lists of countries by GDP rankings\\nList of internati… \"Lists of countries b…\n# ℹ abbreviated names:\n#   ¹​`.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:\"[ \"}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:\" ]\"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a&gt;span,.mw-parser-output .navbar a&gt;abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}html.skin-theme-clientpref-night .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}@media(prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}}@media print{.mw-parser-output .navbar{display:none!important}}vteLists of countries by financial rankings`,\n#   ²​`.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:\"[ \"}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:\" ]\"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a&gt;span,.mw-parser-output .navbar a&gt;abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}html.skin-theme-clientpref-night .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}@media(prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}}@media print{.mw-parser-output .navbar{display:none!important}}vteLists of countries by financial rankings`\n\n[[5]]\n# A tibble: 8 × 2\n  `vteLists of countries by GDP rankings`                 vteLists of countrie…¹\n  &lt;chr&gt;                                                   &lt;chr&gt;                 \n1 \"Nominal\"                                               \"GDP (nominal)\\nPast …\n2 \"Purchasing power parity (PPP)\"                         \"GDP (PPP)\\nPast\\nPas…\n3 \"Per capita\"                                            \"nominal GDP\\nPast an…\n4 \"GDP growth\"                                            \"real GDP growth rate…\n5 \"Gross national income (GNI)\"                           \"PPP per capita\\nNomi…\n6 \"Countries by region\"                                   \"Africa\\nPPP\\nnominal…\n7 \"Subnational divisions\"                                 \"Albania\\nArgentina\\n…\n8 \"Lists of countries by financial rankings\\nList of int… \"Lists of countries b…\n# ℹ abbreviated name: ¹​`vteLists of countries by GDP rankings`\n\n[[6]]\n# A tibble: 13 × 6\n   vteEconomic classification o…¹ vteEconomic classifi…² ``    ``    ``    ``   \n   &lt;chr&gt;                          &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 \"Developed country\\nDevelopin… \"Developed country\\nD… &lt;NA&gt;   &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;\n 2 \"Three/Four-World Model\"       \"First World\\nSecond … &lt;NA&gt;   &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;\n 3 \"Gross domestic product (GDP)\" \"Nominal\\nBy country\\… Nomi… \"By … Purc… \"By …\n 4 \"Nominal\"                      \"By country\\npast and… &lt;NA&gt;   &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;\n 5 \"Purchasing  power parity (PP… \"By country\\nfuture e… &lt;NA&gt;   &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;\n 6 \"Income\"                       \"GNI (nominal) per ca… &lt;NA&gt;   &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;\n 7 \"Wages\"                        \"Average wage\\nEurope… &lt;NA&gt;   &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;\n 8 \"Wealth\"                       \"Wealth per adult\\nEu… &lt;NA&gt;   &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;\n 9 \"Other national accounts\"      \"Gross National Happi… &lt;NA&gt;   &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;\n10 \"Human development\"            \"Human Development In… &lt;NA&gt;   &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;\n11 \"Digital divide\"               \"ICT Development Inde… &lt;NA&gt;   &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;\n12 \"Net international  investmen… \"Per capita (creditor… &lt;NA&gt;   &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;\n13 \"Economics portal\\n World por… \"Economics portal\\n W… &lt;NA&gt;   &lt;NA&gt; &lt;NA&gt;   &lt;NA&gt;\n# ℹ abbreviated names: ¹​`vteEconomic classification of countries`,\n#   ²​`vteEconomic classification of countries`\n\n[[7]]\n# A tibble: 1 × 2\n  Nominal                        By country\\npast and projected\\nper capita\\np…¹\n  &lt;chr&gt;                          &lt;chr&gt;                                          \n1 Purchasing  power parity (PPP) \"By country\\nfuture estimates\\nper capita\\nper…\n# ℹ abbreviated name: ¹​`By country\\npast and projected\\nper capita\\nper capita`\n\ngdp_table &lt;- html_table(tables, header = TRUE, fill = TRUE)[[3]]  \ngdp_table\n\n# A tibble: 211 × 7\n   `Country/Territory` `IMF[1][12]` `IMF[1][12]` `World Bank[13]`\n   &lt;chr&gt;               &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;           \n 1 Country/Territory   Forecast     Year         Estimate        \n 2 World               115,494,312  2025         105,435,540     \n 3 United States       30,338,000   2025         27,360,935      \n 4 China               19,535,000   [n 1]2025    17,794,782      \n 5 Germany             4,922,000    2025         4,456,081       \n 6 Japan               4,390,000    2025         4,212,945       \n 7 India               4,270,000    2025         3,549,919       \n 8 United Kingdom      3,731,000    2025         3,340,032       \n 9 France              3,284,000    2025         3,030,904       \n10 Italy               2,460,000    2025         2,254,851       \n# ℹ 201 more rows\n# ℹ 3 more variables: `World Bank[13]` &lt;chr&gt;, `United Nations[14]` &lt;chr&gt;,\n#   `United Nations[14]` &lt;chr&gt;\n\n\n\nGDP_data &lt;- gdp_table |&gt;\n  select(1,2) #only select the first columns\n\n\nGDP_data &lt;- GDP_data |&gt;\n  rename(\"Forecast\" = `IMF[1][12]`) |&gt; \n  filter(!row_number() %in% c(1, 2)) # Rename the second column to \"Forecast\" and remove unnecessary rows\n\n\n# Step 0: Check that scraping is allowed\nrobotstxt::paths_allowed(\"https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population\")\n\n\n en.wikipedia.org                      \n\n\n[1] TRUE\n\n# Step 1: read_html()\npop_page &lt;- read_html(\"https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population\")\n\n# Step 2: html_nodes()\ntables &lt;- html_nodes(pop_page, css = \"table\") \ntables  # have to guesstimate which table contains our desired info\n\n{xml_nodeset (3)}\n[1] &lt;table class=\"wikitable sortable mw-datatable sort-under static-row-numbe ...\n[2] &lt;table class=\"nowraplinks hlist mw-collapsible autocollapse navbox-inner\" ...\n[3] &lt;table class=\"nowraplinks mw-collapsible autocollapse navbox-inner\" style ...\n\n# Step 3: html_table()\nhtml_table(tables, header = TRUE, fill = TRUE)    # find the right table\n\n[[1]]\n# A tibble: 240 × 6\n   Location      Population    `% ofworld` Date     Source (official or …¹ Notes\n   &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;                  &lt;chr&gt;\n 1 World         8,137,000,000 100%        10 Apr … UN projection[1][3]    \"\"   \n 2 India         1,413,324,000 17.3%       1 Mar 2… Official projection[4] \"[b]\"\n 3 China         1,408,280,000 17.2%       31 Dec … Official estimate[5]   \"[c]\"\n 4 United States 340,110,988   4.2%        1 Jul 2… Official estimate[6]   \"[d]\"\n 5 Indonesia     282,477,584   3.5%        30 Jun … National annual proje… \"\"   \n 6 Pakistan      241,499,431   3.0%        1 Mar 2… 2023 census result[8]  \"[e]\"\n 7 Nigeria       223,800,000   2.7%        1 Jul 2… Official projection[9] \"\"   \n 8 Brazil        212,583,750   2.6%        1 Jul 2… Official projection[1… \"\"   \n 9 Bangladesh    169,828,911   2.1%        14 Jun … 2022 census result[11] \"[f]\"\n10 Russia        146,028,325   1.8%        1 Jan 2… Official estimate[13]  \"[g]\"\n# ℹ 230 more rows\n# ℹ abbreviated name: ¹​`Source (official or fromthe United Nations)`\n\n[[2]]\n# A tibble: 13 × 2\n   .mw-parser-output .navbar{display:inline;font-size:8…¹ .mw-parser-output .n…²\n   &lt;chr&gt;                                                  &lt;chr&gt;                 \n 1 \"Global\"                                               \"Current population\\n…\n 2 \"Continents/subregions\"                                \"Africa\\nAntarctica\\n…\n 3 \"Intercontinental\"                                     \"Americas\\nArab world…\n 4 \"Cities/urban areas\"                                   \"World cities\\nNation…\n 5 \"Past and future\"                                      \"Past and future popu…\n 6 \"Population density\"                                   \"Current density\\nPas…\n 7 \"Growth indicators\"                                    \"Population growth ra…\n 8 \"Life expectancy\"                                      \"World\\nAfrica\\nAsia\\…\n 9 \"Other demographics\"                                   \"Age at childbearing\\…\n10 \"Health\"                                               \"Antidepressant consu…\n11 \"Education and innovation\"                             \"Bloomberg Innovation…\n12 \"Economic\"                                             \"Access to financial …\n13 \"List of international rankings\\nLists by country\"     \"List of internationa…\n# ℹ abbreviated names:\n#   ¹​`.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:\"[ \"}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:\" ]\"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a&gt;span,.mw-parser-output .navbar a&gt;abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}html.skin-theme-clientpref-night .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}@media(prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}}@media print{.mw-parser-output .navbar{display:none!important}}vteLists of countries by population statistics`,\n#   ²​`.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:\"[ \"}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:\" ]\"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a&gt;span,.mw-parser-output .navbar a&gt;abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}html.skin-theme-clientpref-night .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}@media(prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}}@media print{.mw-parser-output .navbar{display:none!important}}vteLists of countries by population statistics`\n\n[[3]]\n# A tibble: 1 × 2\n  vteWorld                                                              vteWorld\n  &lt;chr&gt;                                                                 &lt;chr&gt;   \n1 AfghanistanAlbaniaAlgeriaAndorraAngolaAntigua and BarbudaArgentinaAr… Afghani…\n\npop_table &lt;- html_table(tables, header = TRUE, fill = TRUE)[[1]]  \npop_table\n\n# A tibble: 240 × 6\n   Location      Population    `% ofworld` Date     Source (official or …¹ Notes\n   &lt;chr&gt;         &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;    &lt;chr&gt;                  &lt;chr&gt;\n 1 World         8,137,000,000 100%        10 Apr … UN projection[1][3]    \"\"   \n 2 India         1,413,324,000 17.3%       1 Mar 2… Official projection[4] \"[b]\"\n 3 China         1,408,280,000 17.2%       31 Dec … Official estimate[5]   \"[c]\"\n 4 United States 340,110,988   4.2%        1 Jul 2… Official estimate[6]   \"[d]\"\n 5 Indonesia     282,477,584   3.5%        30 Jun … National annual proje… \"\"   \n 6 Pakistan      241,499,431   3.0%        1 Mar 2… 2023 census result[8]  \"[e]\"\n 7 Nigeria       223,800,000   2.7%        1 Jul 2… Official projection[9] \"\"   \n 8 Brazil        212,583,750   2.6%        1 Jul 2… Official projection[1… \"\"   \n 9 Bangladesh    169,828,911   2.1%        14 Jun … 2022 census result[11] \"[f]\"\n10 Russia        146,028,325   1.8%        1 Jan 2… Official estimate[13]  \"[g]\"\n# ℹ 230 more rows\n# ℹ abbreviated name: ¹​`Source (official or fromthe United Nations)`\n\n\n\nPOP_data &lt;- pop_table |&gt; # Select only the first two columns (location and population) from the GDP table\n  select(1,2)\n\n\nPOP_data &lt;- POP_data |&gt; \n  rename(\"Country/Territory\" = `Location`) |&gt; #rename Location to be Country/Territory to be more accurate\n  filter(!row_number() %in% c(1)) #remove the unnecessary row.\n\n\nGDP_data &lt;- GDP_data |&gt; left_join(POP_data) #combines the GDP data with the population data using join\n\nJoining with `by = join_by(`Country/Territory`)`\n\n\n\nworld_data &lt;- GDP_data #rename to be more accurate"
  },
  {
    "objectID": "MiniProject2.html#ethics",
    "href": "MiniProject2.html#ethics",
    "title": "MiniProject2",
    "section": "Ethics",
    "text": "Ethics\nEthically, we made sure to check the robots.txt file and are not getting personal data from users. We made sure to not use any specific data, and are using data that is widely public knowledge."
  },
  {
    "objectID": "MiniProject2.html#insights-and-questions",
    "href": "MiniProject2.html#insights-and-questions",
    "title": "MiniProject2",
    "section": "Insights and Questions",
    "text": "Insights and Questions\nUsing this data, we wonder what trends could arise between population and GDP. How can we visualize population growth and GDP growth? What is the connection between high GDP per capita and geographical location? These are some of the questions that we wonder about this tibble we created."
  },
  {
    "objectID": "MiniProject2.html#summary",
    "href": "MiniProject2.html#summary",
    "title": "MiniProject2",
    "section": "Summary",
    "text": "Summary\nThis code scrapes GDP and population data from Wikipedia, cleans and merges the datasets, and prepares it for future analysis The dataset, world_data, contains GDP forecasts and population figures by country. We can use the data set to analyze trends between population and forecasted GDP by country. This can be presented using a variety of visual techniques such as leaflet maps, plots, and graphs."
  }
]